// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
    RaymarchUVGeneration.usf: Generate lens distortion and undistortion
    UV displacement map into a render target.

    The pixel shader directly compute the distort viewport UV to undistort
    viewport UV displacement using Sv_Position and the reference equations and
    store them into the red and green channels.

    However to avoid resolving with a ferrari method, or doing a newton method
    on the GPU to compute the undistort viewport UV to distort viewport UV
    displacement, this couple of shaders works as follow: The vertex shader
    undistort the grid's vertices, and pass down to the pixel shader the viewport
    UV of where they should have been on screen without undistortion. The pixel
    shader can then generate the undistort viewport UV to distort viewport UV
    displacement by just subtracting the pixel's viewport UV.
=============================================================================*/

#include "/Engine/Public/Platform.ush"

Texture3D MyTexture;

SamplerState MySampler;

float4x4 Model;

float4x4 View;

float4x4 Projection;

float3 RayOrigin;

struct Ray
{
    float3 Origin;
    float3 Dir;
};

struct AABB
{
    float3 Min;
    float3 Max;
};

bool IntersectBox(Ray r, AABB aabb, out float t0, out float t1)
{
    float3 invR = 1.0 / r.Dir; // TODO use 1.0 / r.Dir?
    float3 tbot = invR * (aabb.Min - r.Origin);
    float3 ttop = invR * (aabb.Max - r.Origin);
    float3 tmin = min(ttop, tbot);
    float3 tmax = max(ttop, tbot);
    float2 t = max(tmin.xx, tmin.yz);
    t0 = max(t.x, t.y);
    t = min(tmax.xx, tmax.yz);
    t1 = min(t.x, t.y);
    return t0 <= t1;
}

void MainVS(
	in float4 InPosition : ATTRIBUTE0,
    out float4 OutColor : COLOR0,
    out float4 OutPosition : SV_POSITION
    )
{

    OutPosition = mul(InPosition, Model);
    OutPosition = mul(OutPosition, View);
	OutPosition = mul(OutPosition, Projection);
    //	OutPosition = InPosition;

	// Color accordingly for rayMarch
    OutColor = float4((InPosition.xyz + float3(1.0, 1.0, 1.0)) / 2, 1.0);

}

void MainPS(
    in float4 InColor : COLOR0,
    in float4 SvPosition : SV_POSITION,
    out float4 OutColor : SV_Target0
    )
{
	// Get object space position of the wall rendered on this pixel (color from vertex shader transformed into [-1,1])
	float3 pixPosInObjectSpace = (InColor.xyz * 2) - 1;
    float3 directionVector = normalize(pixPosInObjectSpace - RayOrigin);

    Ray eye = { RayOrigin, directionVector };
    AABB aabb = { float3(-1.0, -1.0, -1.0), float3(+1.0, +1.0, +1.0) };

    float tnear, tfar;
    IntersectBox(eye, aabb, tnear, tfar);
    if (tnear < 0.0)
        tnear = 0.0;

    float3 rayStart = eye.Origin + eye.Dir * tnear;
    float3 rayStop = eye.Origin + eye.Dir * tfar;
    
    // Transform from object space to texture coordinate space:
    rayStart = 0.5 * (rayStart + 1.0);
    rayStop = 0.5 * (rayStop + 1.0);

	int MaxSamples = 500; // sqrt(3)*100 for diagonal of cube (this also means that the condition with MaxSamples will never trigger)
    float StepSize = 0.01;

    // Perform the ray marching:
    float3 pos = rayStart;
    float3 step = directionVector * StepSize;

	// WHY THE FUCK does this give zeros?
    // float travel = distance(rayStop, rayStart);

	float3 diffVector = rayStart - rayStop;
	float travel = sqrt(diffVector.x * diffVector.x + diffVector.y * diffVector.y + diffVector.z * diffVector.z);

    float alpha = 0;

    for (int i = 0; i < MaxSamples && travel > 0.0; ++i, pos += step, travel -= StepSize)
    {
        alpha += MyTexture.Sample(MySampler, pos).r;
    }

    alpha = clamp(alpha, 0.0, 1.0);
    OutColor = float4(0.8, 0.8, 0.8, alpha);

		
	// For testing the output of vertex shader
	//    OutColor = InColor;


}